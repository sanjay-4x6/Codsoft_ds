import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import precision_score, recall_score, f1_score, confusion_matrix
from imblearn.over_sampling import SMOTE

# Load dataset with an engaging message
df = pd.read_csv("creditcard.csv")
print("💳 Welcome to the Credit Card Fraud Detector! 🔍")

# Display basic info
def preview_data(data):
    print("\n🔍 Exploring Transaction Data:\n")
    print(data.info())
    print(data.head())

preview_data(df)

# Handling class imbalance with SMOTE
X = df.drop(columns=['Class'])
y = df['Class']

smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)
print("⚖️ Class imbalance handled using SMOTE!")

# Split into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)
print("📊 Data successfully split into training and testing sets!")

# Scale numeric features elegantly
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)
print("⚖️ Feature scaling applied!")

# Train a Random Forest Classifier
model = RandomForestClassifier(n_estimators=150, random_state=42)
model.fit(X_train, y_train)
print("🌲 Fraud Detection Model trained successfully!")

# Predictions with style
y_pred = model.predict(X_test)
print("🎯 Predictions generated!")

# Evaluate the model with precision, recall, and F1-score
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)
print(f'🎯 Precision: {precision:.3f}')
print(f'🔍 Recall: {recall:.3f}')
print(f'⚡ F1-Score: {f1:.3f}')

# Confusion Matrix with a fancy plot
plt.figure(figsize=(6, 4))
sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, fmt='d', cmap='Blues', xticklabels=['Genuine', 'Fraud'], yticklabels=['Genuine', 'Fraud'])
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("💡 Confusion Matrix")
plt.show()
print("📊 Fraud detection performance visualized!")
