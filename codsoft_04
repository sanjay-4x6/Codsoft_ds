import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score

df = pd.read_csv("sales_data.csv")
print("📈 Welcome to the Ultimate Sales Predictor! 🚀")

def preview_data(data):
    print("\n🔍 Exploring Sales Data:\n")
    print(data.info())
    print(data.head())

preview_data(df)

df = df[['TV_Advertising', 'Radio_Advertising', 'Newspaper_Advertising', 'Sales']]
print("✅ Key advertising metrics selected!")

df.dropna(inplace=True)
print("♻️ Clean data, no missing values!")

X = df.drop(columns=['Sales'])
y = df['Sales']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
print("📊 Data successfully split into training and testing sets!")

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)
print("⚖️ Feature scaling applied!")

model = RandomForestRegressor(n_estimators=150, random_state=42)
model.fit(X_train, y_train)
print("🌲 Sales Prediction Model trained successfully!")

y_pred = model.predict(X_test)
print("🎯 Predictions generated!")

rmse = np.sqrt(mean_squared_error(y_test, y_pred))
r2 = r2_score(y_test, y_pred)
print(f'📉 RMSE: {rmse:.3f}')
print(f'📈 R² Score: {r2:.3f}')

importances = model.feature_importances_
feature_names = X.columns
sorted_idx = np.argsort(importances)[::-1]
plt.figure(figsize=(12, 6))
sns.barplot(x=importances[sorted_idx], y=feature_names[sorted_idx], palette='coolwarm')
plt.title("🔥 Feature Importance in Sales Prediction 🔥")
plt.xlabel("Importance Level")
plt.ylabel("Advertising Channels")
plt.show()
print("📊 Feature importance visualized!")
