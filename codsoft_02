import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score

df = pd.read_csv("imdb_top_1000.csv")
print("🎬 Welcome to the IMDb Movie Rating Predictor! 📽️")

def preview_data(data):
    print("\n🔍 Data Overview:\n")
    print(data.info())
    print(data.head())

preview_data(df)

df = df[['Genre', 'Director', 'Star1', 'Star2', 'Star3', 'Star4', 'IMDB_Rating', 'Meta_score', 'Gross']]
print("✅ Essential features selected!")

df.dropna(inplace=True)
print("♻️ Missing values handled successfully!")

df['Gross'] = df['Gross'].str.replace(',', '').astype(float)
print("💰 Box office earnings formatted!")

encoder = LabelEncoder()
categorical_features = ['Genre', 'Director', 'Star1', 'Star2', 'Star3', 'Star4']
for feature in categorical_features:
    df[feature] = encoder.fit_transform(df[feature])
print("🎭 Categorical features transformed!")

X = df.drop(columns=['IMDB_Rating'])
y = df['IMDB_Rating']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
print("📊 Data successfully split into training and testing sets!")

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)
print("⚖️ Feature scaling applied!")

model = RandomForestRegressor(n_estimators=150, random_state=42)
model.fit(X_train, y_train)
print("🌲 Random Forest Model trained successfully!")

y_pred = model.predict(X_test)
print("🎯 Predictions generated!")

rmse = np.sqrt(mean_squared_error(y_test, y_pred))
r2 = r2_score(y_test, y_pred)
print(f'📉 RMSE: {rmse:.3f}')
print(f'📈 R² Score: {r2:.3f}')

importances = model.feature_importances_
feature_names = X.columns
sorted_idx = np.argsort(importances)[::-1]
plt.figure(figsize=(12, 6))
sns.barplot(x=importances[sorted_idx], y=feature_names[sorted_idx], palette='magma')
plt.title("🔥 Feature Importance Chart 🔥")
plt.xlabel("Importance Level")
plt.ylabel("Feature Names")
plt.show()
print("📊 Feature importance visualized!")

